<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Programador Livre - python</title><link href="https://berlotto.github.io/" rel="alternate"></link><link href="https://berlotto.github.io/feeds/python.atom.xml" rel="self"></link><id>https://berlotto.github.io/</id><updated>2021-02-16T13:00:00-03:00</updated><subtitle>Informações para programadores</subtitle><entry><title>Pipenv - ambientes virtuais profissionais</title><link href="https://berlotto.github.io/pipenv-ambientes-virtuais-profissionais.html" rel="alternate"></link><published>2021-02-16T13:00:00-03:00</published><updated>2021-02-16T13:00:00-03:00</updated><author><name>Sérgio Berlotto</name></author><id>tag:berlotto.github.io,2021-02-16:/pipenv-ambientes-virtuais-profissionais.html</id><summary type="html">&lt;p&gt;Como conseguimos controlar nosso ambiente de desenvolvimento de forma profissional com o Pipenv.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quem trabalha com Python sabe o quanto temos disponíveis diferentes tipos e versões de bibliotecas. 
E os ambientes virtuais vieram para nos ajudar a trabalhar com várias delas ao mesmo tempo. Mas, com eles
vieram também alguns trampos a mais ... hehe&lt;/p&gt;
&lt;p&gt;Então vamos aprender a utilizar uma ferramenta que gerencia tudo pra nós!&lt;/p&gt;
&lt;h1&gt;Pipenv&lt;/h1&gt;
&lt;p&gt;O pipenv é uma ferramenta que cria uma camada auxiliar no trabalho com os ambientes virtuais.&lt;/p&gt;
&lt;p&gt;Vocês lembram o que são os ambientes virtuais ? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Ambientes virtuais são um conjunto de diretórios que isolam versões de bibliotecas
do Python de forma local, separando-as das versões globais que acompanham o sistema 
operacional." &lt;/p&gt;
&lt;p&gt;-- &lt;cite&gt;&lt;a href="https://medium.com/@lucasferreiraos/python-django-e-ambientes-virtuais-uma-rela%C3%A7%C3%A3o-de-organiza%C3%A7%C3%A3o-e-produtividade-dafb51f11b23"&gt;Lucas Ferreira&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A ferramenta original do python criada para criar os ambientes virtuais é o &lt;code&gt;virtualenv&lt;/code&gt;. Mas ele tem 
seus problemas: ele é muuuito manual, e cria o ambiente virtual no diretório corrente ou temos que 
ficar especificando os caminhos.&lt;/p&gt;
&lt;p&gt;Daí entrou o virtualenv-wrapper, mas tem também seus poréns, com ele precisamos lembrar dos nomes
dos ambientes além de ficar ativando e desativando manual...&lt;/p&gt;
&lt;p&gt;Além disto, em ambas é chato ficar gerenciando o famoso arquivo requirements.txt que todo pythonista
conhece. Adicionar e remover bibliotecas é um trabalho muito manual e ainda, quando necessitamos gerenciar
umas bibliotecas para ambiente de dev e outras para ambiente de produção, aí sim o negócio fica complicado.&lt;/p&gt;
&lt;p&gt;Esses "problemas" todo dev python passa no início.. não adianta. Mas é um aprendizado, eu sempre falo que:
&lt;em&gt;antes de usar uma ferramenta de mais alto nível, aprenda o que está sendo feito por baixo dos panos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Em todas essas tarefas e talvez mais um pouco também o Pipenv nos auxilia muito&lt;/p&gt;
&lt;h3&gt;Hands-on&lt;/h3&gt;
&lt;p&gt;Então vamos pôr a mão na massa.&lt;/p&gt;
&lt;p&gt;Primeiro a instalação&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pip install pipenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora temos que entender uma coisa que é diferente no pipenv com relação aos outros: ele
controla seu ambiente através de dois arquivos: Pipfile e Pipfile.lock&lt;/p&gt;
&lt;p&gt;O Pipfile é atualizado cada vez que você adiciona, remove ou atualiza a versao de uma
biblioteca e juntamente com o Pipfile.lock ele gerencia de forma inteligente as 
dependencias e as bibliotecas utilizadas. 
Você não necessita alterar estes arquivos, quem faz isso é o pipenv mesmo.&lt;/p&gt;
&lt;h3&gt;Criar o ambiente&lt;/h3&gt;
&lt;p&gt;Com o pipenv você não precisa se preocupar em utilizar o pip e o virtualenv em separados. É muito fácil iniciar um novo ambiente virtual:&lt;/p&gt;
&lt;p&gt;Utiliza a versão 3 do interpretador do Python &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv --three
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utiliza a versão 2 do Python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv --two
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utiliza o interpretador do Python informado&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv --python /path/to/specific/python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Além de criar o ambiente com a versão 3 do Python já instala a biblioteca pandas também&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install pandas --three
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O nome do ambiente virtual é criado utilizando o nome da pasta onde você está, mais uma hash string, ficando algo
assim: "testepy--lF-Jmev"&lt;/p&gt;
&lt;p&gt;Veja um exemplo:&lt;/p&gt;
&lt;script id="asciicast-OnZAACzbbi4m8f5E5rRAacTW1" src="https://asciinema.org/a/OnZAACzbbi4m8f5E5rRAacTW1.js" async&gt;&lt;/script&gt;

&lt;h3&gt;Removendo&lt;/h3&gt;
&lt;p&gt;Para remover um ambiente virtual criado, basta executar &lt;code&gt;pipenv --rm&lt;/code&gt; no diretório do projeto.&lt;/p&gt;
&lt;script id="asciicast-4aigyui8MxLmjc4DM07h71iak" src="https://asciinema.org/a/4aigyui8MxLmjc4DM07h71iak.js" async&gt;&lt;/script&gt;

&lt;h3&gt;Gerenciando bibliotecas&lt;/h3&gt;
&lt;p&gt;Para gerenciar (instalar, atualizar e remover) bibliotecas no ambiente virtual e para que elas fiquem registradas 
corretamente no Pipfile, devemos utilizar os comandos a seguir:&lt;/p&gt;
&lt;p&gt;Caso queira adicionar uma lib:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install &amp;lt;lib&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso queira instalar todas libs definidas no Pipenv file, quando faz o clone do projeto por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso queira remover uma lib &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv uninstall &amp;lt;lib&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso queira instalar de um arquivo requirements&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso queira atualizar as bibliotecas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv update --outdated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso queira instalar uma lib somente para os ambiente de desenvolvimento&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install &amp;lt;lib&amp;gt; --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;script id="asciicast-RXJB9WwxwIxCRBYhdqtLLr2w6" src="https://asciinema.org/a/RXJB9WwxwIxCRBYhdqtLLr2w6.js" async&gt;&lt;/script&gt;

&lt;p&gt;E agora, para você ver tudo que foi instalado, use o comandp &lt;code&gt;graph&lt;/code&gt;&lt;/p&gt;
&lt;script id="asciicast-J4p21Th6fF8Ll2iwQKGQml739" src="https://asciinema.org/a/J4p21Th6fF8Ll2iwQKGQml739.js" async&gt;&lt;/script&gt;

&lt;h3&gt;Executar o seu projeto&lt;/h3&gt;
&lt;p&gt;Claro, que depois de definir e instalar suas dependencias e bibliotecas do seu projeto, você 
precisa, obviamente, executar seu script ou programa python. &lt;/p&gt;
&lt;p&gt;Mas como se faz isso utilizando o pipenv ?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv run python main.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sim, você precisa rodar assim pois você &lt;em&gt;não precisa estar com o ambiente virtual ativado&lt;/em&gt; sempre, como
acontece com as outras ferramentas.&lt;/p&gt;
&lt;p&gt;Claro, se você quiser, pode &lt;em&gt;entrar&lt;/em&gt; no ambiente virtual e executar os scripts de lá. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Instalação em produção&lt;/h3&gt;
&lt;p&gt;Para você executar a instalação em produção, você não precisa instalar o que foi utilizado em &lt;code&gt;dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para fazer a instalação diretamente no sistema, como quando você precisa fazer isso em um Docker por exemplo,
você utiliza o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install --system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com ele, o pipenv utiliza o pip do sistema e não do virtualenv. Mas o melhor é utilizar o comando deploy,
que faz a verificação se as bibliotecas estão devidamente "locked" no arquivo Pipfile.lock e aborta se não
estiver.&lt;/p&gt;
&lt;p&gt;Para garantir é sempre bom executar o &lt;code&gt;lock&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv lock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;E com isto, acho que conseguimos passar pelos pontos mais importantes do pipenv.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Como criar e remover os ambientes virtuais&lt;/li&gt;
&lt;li&gt;Como o Pipenv gerencia as dependencias pelo Pipfile&lt;/li&gt;
&lt;li&gt;Como executar comandos dentro do ambiente&lt;/li&gt;
&lt;li&gt;Como gerenciar as libs para o ambiente de dev e de prod&lt;/li&gt;
&lt;li&gt;Como fazer o deploy e o lock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ele tem outros comandos também, por exemplo, o &lt;code&gt;clean&lt;/code&gt; que desinstala todas as 
biblitecas do ambiente, que não estão definidas no Pipfile. Daí só você desbravar um pouco 
mais através do &lt;code&gt;pipenv --help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Todo este post foi baseado na documentação do Pipenv: https://pipenv.pypa.io/en/latest/&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Terminais gravados com https://asciinema.org/&lt;/small&gt;&lt;/p&gt;</content><category term="python"></category><category term="python"></category><category term="pipenv"></category><category term="virtualenv"></category></entry><entry><title>Pyenv - gestão de versões Python</title><link href="https://berlotto.github.io/pyenv-gerenciador-de-versoes.html" rel="alternate"></link><published>2021-02-16T13:00:00-03:00</published><updated>2021-02-16T13:00:00-03:00</updated><author><name>Sérgio Berlotto</name></author><id>tag:berlotto.github.io,2021-02-16:/pyenv-gerenciador-de-versoes.html</id><summary type="html">&lt;p&gt;Como conseguimos controlar nosso ambiente de desenvolvimento de forma profissional com o Pipenv.&lt;/p&gt;</summary><content type="html">&lt;!-- Header_Cover: static/posts/environmental.jpg --&gt;

&lt;p&gt;Quem trabalha com Python sabe o quanto temos disponíveis diferentes tipos e versões de bibliotecas. 
E os ambientes virtuais vieram para nos ajudar a trabalhar com várias delas ao mesmo tempo. Mas, com eles
vieram também alguns trampos a mais ... hehe&lt;/p&gt;
&lt;p&gt;Então vamos aprender a utilizar uma ferramenta que gerencia tudo pra nós!&lt;/p&gt;
&lt;h1&gt;Pyenv&lt;/h1&gt;
&lt;p&gt;O pipenv é uma ferramenta que cria uma camada auxiliar no trabalho com os ambientes virtuais.&lt;/p&gt;
&lt;p&gt;Vocês lembram o que são os ambientes virtuais ? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Ambientes virtuais são um conjunto de diretórios que isolam versões de bibliotecas
do Python de forma local, separando-as das versões globais que acompanham o sistema 
operacional." &lt;/p&gt;
&lt;p&gt;-- &lt;cite&gt;&lt;a href="https://medium.com/@lucasferreiraos/python-django-e-ambientes-virtuais-uma-rela%C3%A7%C3%A3o-de-organiza%C3%A7%C3%A3o-e-produtividade-dafb51f11b23"&gt;Lucas Ferreira&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A ferramenta original do python criada para criar os ambientes virtuais é o &lt;code&gt;virtualenv&lt;/code&gt;. Mas ele tem 
seus problemas: ele é muuuito manual, e cria o ambiente virtual no diretório corrente ou temos que 
ficar especificando os caminhos.&lt;/p&gt;
&lt;p&gt;Daí entrou o virtualenv-wrapper, mas tem também seus poréns, com ele precisamos lembrar dos nomes
dos ambientes além de ficar ativando e desativando manual...&lt;/p&gt;
&lt;p&gt;Além disto, em ambas é chato ficar gerenciando o famoso arquivo requirements.txt que todo pythonista
conhece. Adicionar e remover bibliotecas é um trabalho muito manual e ainda, quando necessitamos gerenciar
umas bibliotecas para ambiente de dev e outras para ambiente de produção, aí sim o negócio fica complicado.&lt;/p&gt;
&lt;p&gt;Esses "problemas" todo dev python passa no início.. não adianta. Mas é um aprendizado, eu sempre falo que:
&lt;em&gt;antes de usar uma ferramenta de mais alto nível, aprenda o que está sendo feito por baixo dos panos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Em todas essas tarefas e talvez mais um pouco também o Pipenv nos auxilia muito&lt;/p&gt;
&lt;h3&gt;Hands-on&lt;/h3&gt;
&lt;p&gt;Então vamos pôr a mão na massa.&lt;/p&gt;
&lt;p&gt;Primeiro a instalação&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pip install pipenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora temos que entender uma coisa que é diferente no pipenv com relação aos outros: ele
controla seu ambiente através de dois arquivos: Pipfile e Pipfile.lock&lt;/p&gt;
&lt;p&gt;O Pipfile é atualizado cada vez que você adiciona, remove ou atualiza a versao de uma
biblioteca e juntamente com o Pipfile.lock ele gerencia de forma inteligente as 
dependencias e as bibliotecas utilizadas. 
Você não necessita alterar estes arquivos, quem faz isso é o pipenv mesmo.&lt;/p&gt;
&lt;h3&gt;Criar o ambiente&lt;/h3&gt;
&lt;p&gt;Com o pipenv você não precisa se preocupar em utilizar o pip e o virtualenv em separados. É muito fácil iniciar um novo ambiente virtual:&lt;/p&gt;
&lt;p&gt;Utiliza a versão 3 do interpretador do Python &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv --three
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utiliza a versão 2 do Python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv --two
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utiliza o interpretador do Python informado&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv --python /path/to/specific/python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Além de criar o ambiente com a versão 3 do Python já instala a biblioteca pandas também&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install pandas --three
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O nome do ambiente virtual é criado utilizando o nome da pasta onde você está, mais uma hash string, ficando algo
assim: "testepy--lF-Jmev"&lt;/p&gt;
&lt;p&gt;Veja um exemplo:&lt;/p&gt;
&lt;script id="asciicast-OnZAACzbbi4m8f5E5rRAacTW1" src="https://asciinema.org/a/OnZAACzbbi4m8f5E5rRAacTW1.js" async&gt;&lt;/script&gt;

&lt;h3&gt;Removendo&lt;/h3&gt;
&lt;p&gt;Para remover um ambiente virtual criado, basta executar &lt;code&gt;pipenv --rm&lt;/code&gt; no diretório do projeto.&lt;/p&gt;
&lt;script id="asciicast-4aigyui8MxLmjc4DM07h71iak" src="https://asciinema.org/a/4aigyui8MxLmjc4DM07h71iak.js" async&gt;&lt;/script&gt;

&lt;h3&gt;Gerenciando bibliotecas&lt;/h3&gt;
&lt;p&gt;Para gerenciar (instalar, atualizar e remover) bibliotecas no ambiente virtual e para que elas fiquem registradas 
corretamente no Pipfile, devemos utilizar os comandos a seguir:&lt;/p&gt;
&lt;p&gt;Caso queira adicionar uma lib:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install &amp;lt;lib&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso queira instalar todas libs definidas no Pipenv file, quando faz o clone do projeto por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso queira remover uma lib &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv uninstall &amp;lt;lib&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso queira instalar de um arquivo requirements&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso queira atualizar as bibliotecas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv update --outdated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso queira instalar uma lib somente para os ambiente de desenvolvimento&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install &amp;lt;lib&amp;gt; --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;script id="asciicast-RXJB9WwxwIxCRBYhdqtLLr2w6" src="https://asciinema.org/a/RXJB9WwxwIxCRBYhdqtLLr2w6.js" async&gt;&lt;/script&gt;

&lt;p&gt;E agora, para você ver tudo que foi instalado, use o comandp &lt;code&gt;graph&lt;/code&gt;&lt;/p&gt;
&lt;script id="asciicast-J4p21Th6fF8Ll2iwQKGQml739" src="https://asciinema.org/a/J4p21Th6fF8Ll2iwQKGQml739.js" async&gt;&lt;/script&gt;

&lt;h3&gt;Executar o seu projeto&lt;/h3&gt;
&lt;p&gt;Claro, que depois de definir e instalar suas dependencias e bibliotecas do seu projeto, você 
precisa, obviamente, executar seu script ou programa python. &lt;/p&gt;
&lt;p&gt;Mas como se faz isso utilizando o pipenv ?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv run python main.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sim, você precisa rodar assim pois você &lt;em&gt;não precisa estar com o ambiente virtual ativado&lt;/em&gt; sempre, como
acontece com as outras ferramentas.&lt;/p&gt;
&lt;p&gt;Claro, se você quiser, pode &lt;em&gt;entrar&lt;/em&gt; no ambiente virtual e executar os scripts de lá. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Instalação em produção&lt;/h3&gt;
&lt;p&gt;Para você executar a instalação em produção, você não precisa instalar o que foi utilizado em &lt;code&gt;dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para fazer a instalação diretamente no sistema, como quando você precisa fazer isso em um Docker por exemplo,
você utiliza o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv install --system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com ele, o pipenv utiliza o pip do sistema e não do virtualenv. Mas o melhor é utilizar o comando deploy,
que faz a verificação se as bibliotecas estão devidamente "locked" no arquivo Pipfile.lock e aborta se não
estiver.&lt;/p&gt;
&lt;p&gt;Para garantir é sempre bom executar o &lt;code&gt;lock&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv lock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;E com isto, acho que conseguimos passar pelos pontos mais importantes do pipenv.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Como criar e remover os ambientes virtuais&lt;/li&gt;
&lt;li&gt;Como o Pipenv gerencia as dependencias pelo Pipfile&lt;/li&gt;
&lt;li&gt;Como executar comandos dentro do ambiente&lt;/li&gt;
&lt;li&gt;Como gerenciar as libs para o ambiente de dev e de prod&lt;/li&gt;
&lt;li&gt;Como fazer o deploy e o lock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ele tem outros comandos também, por exemplo, o &lt;code&gt;clean&lt;/code&gt; que desinstala todas as 
biblitecas do ambiente, que não estão definidas no Pipfile. Daí só você desbravar um pouco 
mais através do &lt;code&gt;pipenv --help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Todo este post foi baseado na documentação do Pipenv: https://pipenv.pypa.io/en/latest/&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Terminais gravados com https://asciinema.org/&lt;/small&gt;&lt;/p&gt;</content><category term="python"></category><category term="python"></category><category term="pipenv"></category><category term="virtualenv"></category></entry></feed>